apply plugin: 'application'

mainClassName = 'org.qmul.csar.Main'

dependencies {
    compile project(':csar-api')
    // https://mvnrepository.com/artifact/com.beust/jcommander
    compile group: 'com.beust', name: 'jcommander', version: '1.72'
    // https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.9.0'
    // https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.0'
}

run {
    dependsOn.add ':plugins:jar'
    dependsOn.add 'build'

    // Set java program arguments from gradle run arguments
    if (project.hasProperty('jargs'))
        args(jargs.split(' '))
}

task distJar(type: Jar, dependsOn: ['compileJava']) {
    group = 'distribution'
    destinationDir = distsDir
    zip64 true

    // Content
    manifest {
        attributes 'Main-Class': mainClassName
    }

    from configurations.runtime.asFileTree.files.collect {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
        zipTree(it)
    }

    from files(sourceSets.main.output.getClassesDirs())
    from files(sourceSets.main.resources)

    // Output Name
    baseName = "${project.name}"
    classifier = "all"
}

build.finalizedBy distJar

distJar.doLast {
    project.project(':plugins').jar // include plugin jars in same directory
}

distZip {
    dependsOn.add ':plugins:jar'

    into(project.name + '/lib/') { // include plugin jars
        from project.project(':plugins').buildDir.toString() + '/libs/'
        include '*.jar'
    }
}

distTar {
    dependsOn.add ':plugins:jar'

    into(project.name + '/lib/') { // include plugin jars
        from project.project(':plugins').buildDir.toString() + '/libs/'
        include '*.jar'
    }
}
